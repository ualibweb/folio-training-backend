/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.folio.sample.rest.resource;

import org.folio.sample.domain.dto.BookDTO;
import org.folio.sample.domain.dto.BookForCreationDTO;
import java.util.UUID;
import io.swagger.annotations.*;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.enums.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-01T22:34:50.993344-05:00[America/Chicago]")
@Validated
@Api(value = "books", description = "the books API")
@SuppressWarnings("unused")
public interface BooksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /books : Create book
     * Create a new book
     *
     * @param bookForCreationDTO  (required)
     * @return The created book (status code 201)
     */
    @ApiOperation(
        tags = {  },
        value = "Create book",
        nickname = "createBook",
        notes = "Create a new book",
        response = BookDTO.class
    )
    @ApiResponses({
        @ApiResponse(code = 201, message = "The created book", response = BookDTO.class)
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/books",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookDTO> createBook(
        @Parameter(name = "BookForCreationDTO", description = "", required = true) @Valid @RequestBody BookForCreationDTO bookForCreationDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books : Get all books
     * Get all books
     *
     * @param onlyLeapYears If true, only return books published in leap years.  If false, only return all books (optional, default to false)
     * @return The query results (status code 200)
     */
    @ApiOperation(
        tags = {  },
        value = "Get all books",
        nickname = "getAllBooks",
        notes = "Get all books",
        response = BookDTO.class,
        responseContainer = "List"
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "The query results", response = BookDTO.class, responseContainer = "List")
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BookDTO>> getAllBooks(
        @Parameter(name = "onlyLeapYears", description = "If true, only return books published in leap years.  If false, only return all books", in = ParameterIn.QUERY) @Valid @RequestParam(value = "onlyLeapYears", required = false, defaultValue = "false") Boolean onlyLeapYears
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/{bookId} : Get a book
     * Get a single book
     *
     * @param bookId  (required)
     * @return The found book results (status code 200)
     *         or The book was not found (status code 404)
     */
    @ApiOperation(
        tags = {  },
        value = "Get a book",
        nickname = "getBook",
        notes = "Get a single book",
        response = BookDTO.class
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "The found book results", response = BookDTO.class),
        @ApiResponse(code = 404, message = "The book was not found")
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{bookId}",
        produces = { "application/json" }
    )
    default ResponseEntity<BookDTO> getBook(
        @Parameter(name = "bookId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bookId") UUID bookId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
